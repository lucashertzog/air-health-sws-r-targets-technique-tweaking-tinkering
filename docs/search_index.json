[["index.html", "AirHealth-SWS: R-targets technique, tweaking and tinkering guidebook 1 Introduction", " AirHealth-SWS: R-targets technique, tweaking and tinkering guidebook Ivan Hanigan 2023-06-01 1 Introduction This site provides a guidebook to using the AirHealth-SWS R-targets scientific workflow system (SWS). This is Lucas’ awesome re-write "],["background.html", "2 Background", " 2 Background The project titled: “Scientific workflow system for environmental health impact assessments” (https://doi.org/10.47486/PL059) aimed to deliver a scientific workflow system (SWS) for health impact assessments (HIAs) that can be used widely by environmental agencies and industrial organisations to consider the health burden of their policies and activities. The work leveraged off the R targets framework to lead toward a standardised computational approach, with alertness to the discourse concerning epidemiological assumptions and limitations. The product of our development is explained with user guide at this site https://cardat.github.io/air-health-sws-r-targets/ where a simple step by step user guide can be found with three case studies that meet the research infrastructure (RI) priorities identified during 2021 The codes are all in R and can be accessed at https://github.com/cardat/air-health-sws-r-targets "],["assumed-knowledge.html", "2.1 Assumed knowledge", " 2.1 Assumed knowledge This guidebook assumes some experience with R scripts such as: Running R in ‘interactive’ mode Running R functions and some understanding of ‘environments’ "],["good-r-functions-recommendations.html", "3 Good R-functions recommendations", " 3 Good R-functions recommendations Our recommendations for the technique for writing R functions using an example. The function case study is plotCI: contributed to the R community email list by Bill Venables in September 1997 It shows some of the best practices for writing R functions "],["ex.1-the-plotci-function.html", "4 Ex.1 The plotCI function", " 4 Ex.1 The plotCI function It is a plot utility function to add confidence intervals or error bars to a dot plot The original post is archived at this website: https://stat.ethz.ch/pipermail/r-help/1997-September/001758.html "],["the-structure-of-a-function-start-with-the-name.html", "4.1 The structure of a function: start with the name", " 4.1 The structure of a function: start with the name The name of the function comes first plotCI followed by the command that defines this as a function. "],["the-arguments.html", "4.2 The arguments", " 4.2 The arguments Then the brackets enclose the arguments of the function (x, y = NULL etc). "],["the-body.html", "4.3 The body", " 4.3 The body Finally the curly braces { and } enclose the body of the function. "],["tip-do-check-that-the-inputs-are-as-expected.html", "4.4 Tip: do check that the inputs are as expected", " 4.4 Tip: do check that the inputs are as expected The first check is whether x is a list (and assumes it contains x and y variables) The second check is if y is NULL, in this case the y variable will have the values of x and the x variable will just indicate how many observations there are It is very clever to also check if x and y are NULL, nothing can be done and the function stops "],["do-stuff.html", "4.5 Do stuff", " 4.5 Do stuff "],["return-outputs.html", "4.6 Return outputs", " 4.6 Return outputs "],["tip-put-each-argument-on-a-separate-line.html", "4.7 Tip: put each argument on a separate line", " 4.7 Tip: put each argument on a separate line The argument x has no default value, however the argument y has the default setting of NULL which means that if the analyst does not supply any value for y when the function is called, then y = NULL. Likewise uiw has no default whereas liw does. If liw is not supplied then it will take the value of uiw. "],["r-targets-pipeline-recommendations-ex.2-and-ex.html", "4.8 R-targets pipeline recommendations (Ex.2 and Ex.3)", " 4.8 R-targets pipeline recommendations (Ex.2 and Ex.3) This section will describe the technique of writing R-targets pipelines The second example will move on from Good Functions to a very simple demonstration of using simple functions in R-pipelines The third example shows aspects of “Good” function-oriented programming style that will make R-targets more elaborate whilst still being trustworthy "],["ex.2-a-simple-r-targets-pipeline.html", "5 Ex.2: a simple R-targets pipeline", " 5 Ex.2: a simple R-targets pipeline this example shows a simulation using a random sample from the normal probabilty distrubtion to generate a fake regression model and a plot "],["step-1-ensure-the-workspace-is-defined.html", "5.1 Step 1: ensure the workspace is defined", " 5.1 Step 1: ensure the workspace is defined - The first thing to do is to make sure the workspace is defined for the pipeline to run - In this case we will use RStudio to set the R working directory pointed at the correct folder for Ex.02 "],["step-2-recommendations-for-main.r-as-well-as-_targets.html", "5.2 Step 2: recommendations for main.R as well as _targets.R", " 5.2 Step 2: recommendations for main.R as well as _targets.R In many cases a main.R script can be a useful method to control the pipeline and summarise aspcets of the development and assist writing the report The simple example here provides both a main.R as well as _targets.R for inspection "],["ex.3-good-function-oriented-programming-style.html", "6 Ex.3: “Good” function-oriented programming style", " 6 Ex.3: “Good” function-oriented programming style "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
